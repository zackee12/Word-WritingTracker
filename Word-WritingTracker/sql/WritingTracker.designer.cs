#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Word_WritingTracker.sql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WritingTracker")]
	public partial class WritingTrackerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMetric(Metric instance);
    partial void UpdateMetric(Metric instance);
    partial void DeleteMetric(Metric instance);
    partial void InsertTrackedFile(TrackedFile instance);
    partial void UpdateTrackedFile(TrackedFile instance);
    partial void DeleteTrackedFile(TrackedFile instance);
    #endregion
		
		public WritingTrackerDataContext() : 
				base(global::Word_WritingTracker.Properties.Settings.Default.WritingTrackerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WritingTrackerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WritingTrackerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WritingTrackerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WritingTrackerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Metric> Metrics
		{
			get
			{
				return this.GetTable<Metric>();
			}
		}
		
		public System.Data.Linq.Table<TrackedFile> TrackedFiles
		{
			get
			{
				return this.GetTable<TrackedFile>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Metrics")]
	public partial class Metric : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FileID;
		
		private System.DateTime _TimeStamp;
		
		private int _WordCount;
		
		private EntityRef<TrackedFile> _TrackedFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFileIDChanging(int value);
    partial void OnFileIDChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnWordCountChanging(int value);
    partial void OnWordCountChanged();
    #endregion
		
		public Metric()
		{
			this._TrackedFile = default(EntityRef<TrackedFile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileID", DbType="Int NOT NULL")]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					if (this._TrackedFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordCount", DbType="Int NOT NULL")]
		public int WordCount
		{
			get
			{
				return this._WordCount;
			}
			set
			{
				if ((this._WordCount != value))
				{
					this.OnWordCountChanging(value);
					this.SendPropertyChanging();
					this._WordCount = value;
					this.SendPropertyChanged("WordCount");
					this.OnWordCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrackedFile_Metric", Storage="_TrackedFile", ThisKey="FileID", OtherKey="ID", IsForeignKey=true)]
		public TrackedFile TrackedFile
		{
			get
			{
				return this._TrackedFile.Entity;
			}
			set
			{
				TrackedFile previousValue = this._TrackedFile.Entity;
				if (((previousValue != value) 
							|| (this._TrackedFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrackedFile.Entity = null;
						previousValue.Metrics.Remove(this);
					}
					this._TrackedFile.Entity = value;
					if ((value != null))
					{
						value.Metrics.Add(this);
						this._FileID = value.ID;
					}
					else
					{
						this._FileID = default(int);
					}
					this.SendPropertyChanged("TrackedFile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrackedFiles")]
	public partial class TrackedFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FileName;
		
		private bool _Tracked;
		
		private string _ProjectName;
		
		private EntitySet<Metric> _Metrics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnTrackedChanging(bool value);
    partial void OnTrackedChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    #endregion
		
		public TrackedFile()
		{
			this._Metrics = new EntitySet<Metric>(new Action<Metric>(this.attach_Metrics), new Action<Metric>(this.detach_Metrics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tracked", DbType="Bit NOT NULL")]
		public bool Tracked
		{
			get
			{
				return this._Tracked;
			}
			set
			{
				if ((this._Tracked != value))
				{
					this.OnTrackedChanging(value);
					this.SendPropertyChanging();
					this._Tracked = value;
					this.SendPropertyChanged("Tracked");
					this.OnTrackedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrackedFile_Metric", Storage="_Metrics", ThisKey="ID", OtherKey="FileID")]
		public EntitySet<Metric> Metrics
		{
			get
			{
				return this._Metrics;
			}
			set
			{
				this._Metrics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Metrics(Metric entity)
		{
			this.SendPropertyChanging();
			entity.TrackedFile = this;
		}
		
		private void detach_Metrics(Metric entity)
		{
			this.SendPropertyChanging();
			entity.TrackedFile = null;
		}
	}
}
#pragma warning restore 1591
